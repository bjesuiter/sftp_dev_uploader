name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch:
    inputs:
      build-macos:
        description: 'Build for MacOS arm64'
        required: true
        default: true
        type: boolean
      build-windows:
        description: 'Build for Windows x64'
        required: true
        default: true
        type: boolean
      build-linux-ubuntu-22:
        description: 'Build for GNU Linux x64 on ubuntu 22.04'
        required: true
        default: true
        type: boolean

jobs:
  get-package-version:
    name: Get Package Version
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.85.1
          override: true

      - name: Get Version
        id: get_version
        run: echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

  matrix_build:
    name: Build
    needs: [get-package-version]
    strategy:
      matrix:
        include:
          # Use ubuntu 22.04 for gnu builds since the 24.04 version uses GLIBC 2.38
          # which is too new for the Linux Mint VPCs version 21.x, based on ubuntu 22.04
          - os: ubuntu-22.04
            rust_target: x86_64-unknown-linux-gnu
            artifact_name: dev_uploader-linux_x64
            artifact_extension: ''
            build_executable_name: dev_uploader
          # - os: ubuntu-24.04
          #   rust_target: x86_64-unknown-linux-musl
          #   artifact_name: dev_uploader-linux_x64_musl
          #   build_executable_name: dev_uploader
          - os: macos-latest
            rust_target: aarch64-apple-darwin
            artifact_name: dev_uploader-mac_arm64
            artifact_extension: ''
            build_executable_name: dev_uploader
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            artifact_name: dev_uploader-windows_x64
            artifact_extension: '.exe'
            build_executable_name: dev_uploader.exe
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
        if: |
          (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
          (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
          (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        if: |
          (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
          (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
          (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)
        with:
          toolchain: 1.85.1
          target: ${{ matrix.rust_target }}
          override: true

      # - name: Install musl tools
      #   if: matrix.rust_target == 'x86_64-unknown-linux-musl'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y musl-tools

      # Cargo build commands
      # ---------------------
      - name: Build macos
        if: matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true
        run: cargo build -v --release --bin dev_uploader --target ${{ matrix.rust_target }}
        env:
          RUSTFLAGS: '-A warnings'
          # needed for macos - will be ignored on other platforms of the matrix build
          MACOSX_DEPLOYMENT_TARGET: 14.5
          # needed for macos - tells the rust crates interfacing with openssl to link against static libraries
          OPENSSL_STATIC: 1

      - name: Build gnu linux
        if: matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true
        run: cargo build -v --release --bin dev_uploader --target ${{ matrix.rust_target }}
        env:
          RUSTFLAGS: '-A warnings'

      - name: Build windows
        if: matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true
        run: cargo build -v --release --bin dev_uploader --target ${{ matrix.rust_target }}
        env:
          RUSTFLAGS: '-A warnings'

      # Artifact check and upload
      # ---------------------
      - name: Check if build was successful (inside matrix_build)
        if: |
          (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
          (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
          (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)
        run: |
          if [ "${{ matrix.rust_target }}" == "x86_64-unknown-linux-gnu" ]; then
            chmod +x target/${{ matrix.rust_target }}/release/dev_uploader${{ matrix.artifact_extension }}
          fi
          if [ "${{ matrix.rust_target }}" == "aarch64-apple-darwin" ]; then
            chmod +x target/${{ matrix.rust_target }}/release/dev_uploader${{ matrix.artifact_extension }}
          fi
          ./target/${{ matrix.rust_target }}/release/dev_uploader${{ matrix.artifact_extension }} --help

      - name: Prepare release file
        id: prepare_release_file
        if: |
          (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
          (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
          (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)
        env:
          BUILD_FILEPATH: target/${{ matrix.rust_target }}/release/dev_uploader${{ matrix.artifact_extension }}
          RELEASE_FILENAME: ${{ matrix.artifact_name }}_${{ matrix.os }}_v${{ needs.get-package-version.outputs.package_version }}${{ matrix.artifact_extension }}
        run: |
          mkdir -p release_files
          cp ${BUILD_FILEPATH} release_files/${RELEASE_FILENAME}
          echo "filename=${RELEASE_FILENAME}" >> $GITHUB_OUTPUT
          echo "filepath=release_files/${RELEASE_FILENAME}" >> $GITHUB_OUTPUT

      # - name: Set artifact name
      #   id: set_artifact_name
      #   if: |
      #     (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
      #     (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
      #     (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)
      #   run: echo "artifact_name=${{ matrix.artifact_name }}_${{ matrix.os }}_v${{ needs.get-package-version.outputs.package_version }}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        id: upload_artifact
        if: |
          (matrix.rust_target == 'aarch64-apple-darwin' && inputs.build-macos == true) ||
          (matrix.rust_target == 'x86_64-unknown-linux-gnu' && inputs.build-linux-ubuntu-22 == true) ||
          (matrix.rust_target == 'x86_64-pc-windows-msvc' && inputs.build-windows == true)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_release_file.outputs.filename }}
          path: ${{ steps.prepare_release_file.outputs.filepath }}

  test_ubuntu_22_artifact:
    name: Test Ubuntu 22.04 Artifact on Ubuntu 24.04
    needs: [get-package-version, matrix_build]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Download Ubuntu 22.04 artifact
        uses: actions/download-artifact@v4
        with:
          name: dev_uploader-linux_x64_ubuntu-22.04_v${{ needs.get-package-version.outputs.package_version }}
          path: test_artifact

      - name: Test artifact for ubuntu-22.04 on ubuntu-24.04
        env:
          ARTIFACT_FILEPATH: test_artifact/dev_uploader-linux_x64_ubuntu-22.04_v${{ needs.get-package-version.outputs.package_version }}
        run: |
          ls -la test_artifact/
          chmod +x ${{ env.ARTIFACT_FILEPATH }}
          ./${{ env.ARTIFACT_FILEPATH }} --help

  release:
    name: Create Release
    needs: [get-package-version, matrix_build]
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: ${{ needs.get-package-version.outputs.package_version }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Log input params
        run: |
          echo "PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: dev_uploader-*

      - name: List downloaded artifacts
        run: ls -la artifacts/

      # - name: Prepare artifacts for release
      #   run: |
      #     mkdir -p release_files
      #     cp artifacts/dev_uploader-linux_x64_v${PACKAGE_VERSION}/dev_uploader release_files/dev_uploader-linux_x64_v${PACKAGE_VERSION}
      #     chmod +x release_files/dev_uploader-linux_x64_v${PACKAGE_VERSION}
      #     cp artifacts/dev_uploader-mac_arm64_v${PACKAGE_VERSION}/dev_uploader release_files/dev_uploader-mac_arm64_v${PACKAGE_VERSION}
      #     chmod +x release_files/dev_uploader-mac_arm64_v${PACKAGE_VERSION}
      #     cp artifacts/dev_uploader-windows_x64_v${PACKAGE_VERSION}.exe/dev_uploader.exe release_files/dev_uploader-windows_x64_v${PACKAGE_VERSION}.exe
      #     ls -la release_files/

      # - name: Create Release
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     draft: true
      #     prerelease: false
      #     name: ${{ github.event_name == 'workflow_dispatch' && 'Manual Release' || format('{0}', github.ref_name) }}
      #     files: |
      #       release_files/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
