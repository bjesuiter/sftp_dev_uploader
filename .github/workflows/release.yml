name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch:

# @bjesuiter: all rustflags in here override the default ones in Cargo.toml.
# Cargo.toml has specific rustflags for linking on macos and linux right now.
jobs:
  get-package-version:
    name: Get Package Version
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.85.1
          override: true

      - name: Get Version
        id: get_version
        run: echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: get-package-version
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          # Works
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact_name: dev_uploader-linux_x64
            artifact_extension: ''
            build_artifact_name: dev_uploader
            rustflags: '-A warnings'
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dev_uploader-mac_arm64
            artifact_extension: ''
            build_artifact_name: dev_uploader
            rustflags: '-A warnings'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dev_uploader-windows_x64
            artifact_extension: '.exe'
            build_artifact_name: dev_uploader.exe
            rustflags: '-A warnings'
          # Not tested yet, also not needed for now
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   artifact_name: dev_uploader-windows-arm64.exe
          # TODO: fix these - maybe with github arm and macos runners
          # aka: runs-on: "ubuntu-22.04-arm" or "macos-15"
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: dev_uploader-linux-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.85.1
          target: ${{ matrix.target }}
          override: true

      - name: Build
        env:
          target_path: target/${{ matrix.target }}/release/dev_uploader
          RUSTFLAGS: ${{ matrix.rustflags }}
          # needed for macos - will be ignored on other platforms of the matrix build
          MACOSX_DEPLOYMENT_TARGET: 14.5
          # needed for macos - tells the rust crates interfacing with openssl to link against static libraries
          OPENSSL_STATIC: 1
        run: cargo build -v --release --bin dev_uploader --target ${{ matrix.target }}

      - name: Check if build was successful
        run: |
          ./target/${{ matrix.target }}/release/${{ matrix.build_artifact_name }} --help

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}_v${{ needs.get-package-version.outputs.package_version }}${{matrix.artifact_extension}}
          path: target/${{ matrix.target }}/release/${{ matrix.build_artifact_name }}

  release:
    name: Create Release
    needs: [get-package-version, build]
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: ${{ needs.get-package-version.outputs.package_version }}
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: dev_uploader-*

      - name: List downloaded artifacts
        run: ls -la artifacts/

      - name: Prepare artifacts for release
        run: |
          mkdir -p release_files
          cp artifacts/dev_uploader-linux_x64_v${PACKAGE_VERSION}/dev_uploader release_files/dev_uploader-linux_x64_v${PACKAGE_VERSION}
          chmod +x release_files/dev_uploader-linux_x64_v${PACKAGE_VERSION}
          cp artifacts/dev_uploader-mac_arm64_v${PACKAGE_VERSION}/dev_uploader release_files/dev_uploader-mac_arm64_v${PACKAGE_VERSION}
          chmod +x release_files/dev_uploader-mac_arm64_v${PACKAGE_VERSION}
          cp artifacts/dev_uploader-windows_x64_v${PACKAGE_VERSION}.exe/dev_uploader.exe release_files/dev_uploader-windows_x64_v${PACKAGE_VERSION}.exe
          ls -la release_files/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          files: |
            release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
